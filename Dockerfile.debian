ARG DOCKER_FROM=lib.docker:latest
FROM "ghcr.io/rekgrpth/$DOCKER_FROM"
ADD bin /usr/local/bin
ARG DOCKER_BUILD=build
ARG DOCKER_POSTGRES_BRANCH=REL_14_STABLE
CMD [ "postgres" ]
ENV HOME=/var/lib/postgresql
STOPSIGNAL SIGINT
WORKDIR "$HOME"
ENV ARC=../arc \
    GROUP=postgres \
    LOG=../log \
    PGDATA="$HOME/data" \
    USER=postgres
RUN set -eux; \
    export DEBIAN_FRONTEND=noninteractive; \
    export DOCKER_BUILD="$DOCKER_BUILD"; \
    export DOCKER_POSTGRES_BRANCH="$DOCKER_POSTGRES_BRANCH"; \
    chmod +x /usr/local/bin/*.sh; \
    apt-get update; \
    apt-get full-upgrade -y --no-install-recommends; \
    export savedAptMark="$(apt-mark showmanual)"; \
    if [ "$DOCKER_BUILD" = "build" ]; then \
        addgroup --system --gid 999 "$GROUP"; \
        adduser --system --uid 999 --home "$HOME" --shell /bin/bash --ingroup "$GROUP" "$USER"; \
        apt-get install -y --no-install-recommends \
            apt-utils \
            autoconf \
            automake \
            autopoint \
            binutils \
            bison \
            check \
            clang \
            file \
            flex \
            g++ \
            gcc \
            gettext \
            git \
            gnupg \
            gnutls-dev \
            groff \
            libbrotli-dev \
            libc-ares-dev \
            libc-dev \
            libcjson-dev \
            libclang-dev \
            libcurl4-openssl-dev \
            libedit-dev \
            libevent-dev \
            libfltk1.3-dev \
            libgcrypt20-dev \
            libgdal-dev \
            libgdal-dev \
            libgeos-dev \
            libgeos-dev \
            libgss-dev \
            libicu-dev \
            libidn11-dev \
            libidn2-dev \
            libjansson-dev \
            libjpeg-dev \
            libjson-c-dev \
            libkrb5-dev \
            libldap2-dev \
            liblmdb-dev \
            liblz4-dev \
            libnghttp2-dev \
            libpam0g-dev \
            libpcre2-dev \
            libpcre3-dev \
            libperl-dev \
            libpng-dev \
            libpq-dev \
            libproj-dev \
            libprotobuf-c-dev \
            libpsl-dev \
            libreadline-dev \
            libselinux1-dev \
            libssh-dev \
            libssl-dev \
            libsubunit-dev \
            libtalloc-dev \
            libtool \
            libtool \
            libudns-dev \
            libunwind-dev \
            libxml2-dev \
            libxslt-dev \
            libyaml-dev \
            libzstd-dev \
            linux-headers-generic \
            linux-libc-dev \
            llvm \
            llvm-dev \
            lsb-release \
            make \
            mt-st \
            patch \
            pkg-config \
            protobuf-c-compiler \
            python3 \
            python3-dev \
            python3-docutils \
            rtmpdump \
            systemtap-sdt-dev \
            tcl-dev \
            texinfo \
            zlib1g-dev \
        ; \
    else \
        apt-get install -y --no-install-recommends \
            git \
            make \
            patch \
            perl \
        ; \
    fi; \
    docker_clone.sh; \
    "docker_$DOCKER_BUILD.sh"; \
    cd /; \
    apt-mark auto '.*' > /dev/null; \
    apt-mark manual $savedAptMark; \
    find /usr/local -type f -executable -exec ldd '{}' ';' | grep -v 'not found' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | grep -v -e gdal -e geos -e perl -e python -e tcl | sort -u | xargs -r apt-mark manual; \
    find /usr/local -type f -executable -exec ldd '{}' ';' | grep -v 'not found' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r -i echo "/usr{}" | xargs -r dpkg-query --search | cut -d: -f1 | grep -v -e gdal -e geos -e perl -e python -e tcl | sort -u | xargs -r apt-mark manual; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    apt-get install -y --no-install-recommends \
        openssh-client \
    ; \
    rm -rf /var/lib/apt/lists/* /var/cache/ldconfig/aux-cache /var/cache/ldconfig; \
    rm -rf "$HOME" /usr/share/doc /usr/share/man /usr/local/share/doc /usr/local/share/man; \
    find /usr -type f -name "*.la" -delete; \
    mkdir -p "$HOME"; \
    chown -R "$USER":"$GROUP" "$HOME"; \
    install -d -m 1775 -o "$USER" -g "$GROUP" /run/postgresql /run/postgresql/pg_stat_tmp /var/log/postgresql; \
    install -d -m 0700 -o "$USER" -g "$GROUP" "$PGDATA"; \
    mkdir -p /docker-entrypoint-initdb.d; \
    echo done
